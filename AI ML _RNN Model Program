{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP5B2XvX4PRVU9HF1FuH7Vm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DigitalSangee/CollegeWorkshop/blob/main/AI%20ML%20_RNN%20Model%20Program\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LrAeSNjqXn8t",
        "outputId": "a495b6ef-2cfa-490f-e849-50fd61a498a7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [10/100], Loss: 738.9200\n",
            "Epoch [20/100], Loss: 652.0939\n",
            "Epoch [30/100], Loss: 606.4559\n",
            "Epoch [40/100], Loss: 570.8804\n",
            "Epoch [50/100], Loss: 538.2029\n",
            "Epoch [60/100], Loss: 507.3348\n",
            "Epoch [70/100], Loss: 477.8869\n",
            "Epoch [80/100], Loss: 449.9542\n",
            "Epoch [90/100], Loss: 423.5168\n",
            "Epoch [100/100], Loss: 398.4741\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import numpy as np\n",
        "\n",
        "# Hardcoded temperature data (for demonstration)\n",
        "temperature_data = np.array([25.1, 25.5, 25.8, 26.3, 27.0, 27.5, 27.8, 28.2, 28.7, 29.1,\n",
        "                             29.5, 29.8, 30.2, 30.7, 31.0, 31.4, 31.8, 32.1, 32.5, 32.9,\n",
        "                             33.2, 33.6, 34.0, 34.3, 34.7, 35.1, 35.4, 35.8, 36.2, 36.5])\n",
        "\n",
        "# Split data into sequences\n",
        "sequence_length = 5\n",
        "sequences = []\n",
        "for i in range(len(temperature_data) - sequence_length):\n",
        "    sequences.append(temperature_data[i:i+sequence_length])\n",
        "\n",
        "# Convert to PyTorch tensors\n",
        "sequences = torch.tensor(sequences, dtype=torch.float32)\n",
        "\n",
        "# Split into train and test sets\n",
        "train_size = int(0.8 * len(sequences))\n",
        "train_data = sequences[:train_size]\n",
        "test_data = sequences[train_size:]\n",
        "\n",
        "# Define the RNN model\n",
        "class TemperatureRNN(nn.Module):\n",
        "    def __init__(self, input_size, hidden_size, num_layers):\n",
        "        super(TemperatureRNN, self).__init__()\n",
        "        self.rnn = nn.RNN(input_size, hidden_size, num_layers, batch_first=True)\n",
        "        self.fc = nn.Linear(hidden_size, 1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        out, _ = self.rnn(x)\n",
        "        out = self.fc(out[:, -1, :])  # Take the last output of the sequence\n",
        "        return out\n",
        "\n",
        "# Define model hyperparameters\n",
        "input_size = 1  # Input dimension (1 for univariate time series)\n",
        "hidden_size = 64\n",
        "num_layers = 2\n",
        "\n",
        "# Initialize the model\n",
        "model = TemperatureRNN(input_size, hidden_size, num_layers)\n",
        "\n",
        "# Define loss function and optimizer\n",
        "criterion = nn.MSELoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n",
        "\n",
        "# Reshape train_data for the correct shape\n",
        "train_data = train_data.view(-1, sequence_length, input_size)\n",
        "\n",
        "# Training loop\n",
        "num_epochs = 100\n",
        "for epoch in range(num_epochs):\n",
        "    # Forward pass\n",
        "    outputs = model(train_data)\n",
        "    loss = criterion(outputs, train_data[:, -1, :])\n",
        "\n",
        "    # Backward pass and optimization\n",
        "    optimizer.zero_grad()\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    if (epoch+1) % 10 == 0:\n",
        "        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')\n",
        "\n",
        "# Testing and prediction\n",
        "model.eval()\n",
        "with torch.no_grad():\n",
        "    # Reshape test_data for prediction\n",
        "    test_data_reshaped = test_data.view(-1, sequence_length, input_size)\n",
        "    test_output = model(test_data_reshaped)\n",
        "\n",
        "# Convert predictions back to numpy arrays\n",
        "predicted_temperature = test_output.cpu().numpy()\n",
        "\n",
        "# You can now replace the hardcoded temperature_data with your actual temperature dataset for real-world predictions.\n"
      ]
    }
  ]
}